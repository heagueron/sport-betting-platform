// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  name            String
  email           String   @unique
  password        String
  role            Role     @default(USER)
  balance         Float    @default(0)      // Mantener para compatibilidad
  availableBalance Float    @default(0)      // Nuevo campo
  reservedBalance  Float    @default(0)      // Nuevo campo
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  bets            Bet[]

  @@map("users")
}

model Sport {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events    Event[]

  @@map("sports")
}

model Event {
  id          String     @id @default(uuid())
  name        String
  startTime   DateTime
  endTime     DateTime?
  status      EventStatus @default(SCHEDULED)
  format      EventFormat @default(HEAD_TO_HEAD)
  result      String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  sportId     String
  sport       Sport      @relation(fields: [sportId], references: [id])

  participants Participant[]
  bets         Bet[]
  markets      Market[]    // Nueva relación

  @@map("events")
}

model Participant {
  id        String   @id @default(uuid())
  name      String
  odds      Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])

  @@map("participants")
}

// Mercado de apuestas
model Market {
  id          String       @id @default(uuid())
  name        String       // Ej: "Ganador del partido"
  status      MarketStatus @default(OPEN)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  eventId     String
  event       Event        @relation(fields: [eventId], references: [id])

  bets        Bet[]

  @@map("markets")
}

model Bet {
  id               String    @id @default(uuid())
  amount           Float
  odds             Float
  selection        String
  status           BetStatus @default(UNMATCHED)  // Cambiado de PENDING a UNMATCHED
  potentialWinnings Float
  type             BetType   @default(BACK)       // Nuevo campo
  liability        Float?                         // Nuevo campo para apuestas LAY
  matchedAmount    Float     @default(0)          // Nuevo campo
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  settledAt        DateTime?

  userId           String
  user             User      @relation(fields: [userId], references: [id])

  eventId          String
  event            Event     @relation(fields: [eventId], references: [id])

  marketId         String
  market           Market    @relation(fields: [marketId], references: [id])

  // Relaciones para emparejamiento
  asBackBet        BetMatch[] @relation("BackBet")
  asLayBet         BetMatch[] @relation("LayBet")

  @@map("bets")
}

// Emparejamientos entre apuestas
model BetMatch {
  id          String   @id @default(uuid())
  amount      Float    // Monto emparejado
  odds        Float    // Cuota del emparejamiento
  createdAt   DateTime @default(now())

  backBetId   String
  backBet     Bet      @relation("BackBet", fields: [backBetId], references: [id])

  layBetId    String
  layBet      Bet      @relation("LayBet", fields: [layBetId], references: [id])

  @@map("bet_matches")
}

enum Role {
  USER
  ADMIN
}

enum EventStatus {
  SCHEDULED
  LIVE
  COMPLETED
  CANCELLED
}

enum EventFormat {
  HEAD_TO_HEAD
  MULTI_PARTICIPANT
}

enum BetStatus {
  UNMATCHED         // Nueva opción (reemplaza PENDING)
  PARTIALLY_MATCHED // Nueva opción
  FULLY_MATCHED     // Nueva opción
  WON
  LOST
  CANCELLED
  VOID              // Nueva opción
}

enum BetType {
  BACK
  LAY
}

enum MarketStatus {
  OPEN
  SUSPENDED
  CLOSED
  SETTLED
  CANCELLED
}
